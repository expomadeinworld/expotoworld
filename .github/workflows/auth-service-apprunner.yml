name: Deploy Auth Service to App Runner

on:
  push:
    branches:
      - main
    paths:
      - 'backend/auth-service/**'
      - '.github/workflows/auth-service-apprunner.yml'
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  SERVICE_NAME: expotoworld-auth-service
  ECR_REPOSITORY: expotoworld-auth-service

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to App Runner
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::834076182408:role/GitHubActionsECRPush-expotoworld
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get current image tag from App Runner
        id: current-image
        run: |
          CURRENT_IMAGE=$(aws apprunner describe-service \
            --service-arn arn:aws:apprunner:${{ env.AWS_REGION }}:834076182408:service/${{ env.SERVICE_NAME }}/e7a6567be4e14507ade5f73312d95256 \
            --region ${{ env.AWS_REGION }} \
            --query 'Service.SourceConfiguration.ImageRepository.ImageIdentifier' \
            --output text)
          echo "current_image=$CURRENT_IMAGE" >> $GITHUB_OUTPUT
          echo "Current image: $CURRENT_IMAGE"

      - name: Get latest ECR image tag
        id: latest-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          LATEST_TAG=$(aws ecr describe-images \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --region ${{ env.AWS_REGION }} \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
            --output text)
          
          if [ "$LATEST_TAG" == "None" ] || [ -z "$LATEST_TAG" ]; then
            echo "No images found in ECR repository"
            exit 1
          fi
          
          LATEST_IMAGE="${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${LATEST_TAG}"
          echo "latest_image=$LATEST_IMAGE" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest image: $LATEST_IMAGE"

      - name: Check if deployment needed
        id: check-deployment
        run: |
          CURRENT="${{ steps.current-image.outputs.current_image }}"
          LATEST="${{ steps.latest-image.outputs.latest_image }}"
          
          if [ "$CURRENT" == "$LATEST" ]; then
            echo "deployment_needed=false" >> $GITHUB_OUTPUT
            echo "✅ App Runner is already running the latest image"
          else
            echo "deployment_needed=true" >> $GITHUB_OUTPUT
            echo "🔄 Deployment needed:"
            echo "  Current: $CURRENT"
            echo "  Latest:  $LATEST"
          fi

      - name: Update App Runner service
        if: steps.check-deployment.outputs.deployment_needed == 'true'
        run: |
          echo "Updating App Runner service to use image: ${{ steps.latest-image.outputs.latest_image }}"
          
          aws apprunner update-service \
            --service-arn arn:aws:apprunner:${{ env.AWS_REGION }}:834076182408:service/${{ env.SERVICE_NAME }}/e7a6567be4e14507ade5f73312d95256 \
            --region ${{ env.AWS_REGION }} \
            --source-configuration '{
              "ImageRepository": {
                "ImageIdentifier": "${{ steps.latest-image.outputs.latest_image }}",
                "ImageRepositoryType": "ECR",
                "ImageConfiguration": {
                  "Port": "8081",
                  "RuntimeEnvironmentSecrets": {
                    "DATABASE_URL": "${{ secrets.DATABASE_URL_SECRET_ARN }}",
                    "JWT_SECRET": "${{ secrets.JWT_SECRET_ARN }}"
                  },
                  "RuntimeEnvironmentVariables": {
                    "PORT": "8081",
                    "GIN_MODE": "release",
                    "AWS_DEFAULT_REGION": "${{ env.AWS_REGION }}",
                    "SES_AWS_REGION": "${{ env.AWS_REGION }}",
                    "SNS_AWS_REGION": "${{ env.AWS_REGION }}",
                    "SES_FROM_EMAIL": "no-reply@expotoworld.com"
                  }
                }
              },
              "AutoDeploymentsEnabled": false
            }'

      - name: Wait for deployment to complete
        if: steps.check-deployment.outputs.deployment_needed == 'true'
        run: |
          echo "Waiting for App Runner service to finish deploying..."
          
          MAX_ATTEMPTS=60
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATUS=$(aws apprunner describe-service \
              --service-arn arn:aws:apprunner:${{ env.AWS_REGION }}:834076182408:service/${{ env.SERVICE_NAME }}/e7a6567be4e14507ade5f73312d95256 \
              --region ${{ env.AWS_REGION }} \
              --query 'Service.Status' \
              --output text)
            
            echo "Attempt $((ATTEMPT + 1))/$MAX_ATTEMPTS - Status: $STATUS"
            
            if [ "$STATUS" == "RUNNING" ]; then
              echo "✅ Deployment completed successfully!"
              break
            elif [ "$STATUS" == "OPERATION_IN_PROGRESS" ]; then
              echo "⏳ Deployment in progress..."
              sleep 10
            else
              echo "❌ Unexpected status: $STATUS"
              exit 1
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "❌ Deployment timed out after $((MAX_ATTEMPTS * 10)) seconds"
            exit 1
          fi

      - name: Verify deployment
        if: steps.check-deployment.outputs.deployment_needed == 'true'
        run: |
          SERVICE_URL=$(aws apprunner describe-service \
            --service-arn arn:aws:apprunner:${{ env.AWS_REGION }}:834076182408:service/${{ env.SERVICE_NAME }}/e7a6567be4e14507ade5f73312d95256 \
            --region ${{ env.AWS_REGION }} \
            --query 'Service.ServiceUrl' \
            --output text)
          
          echo "Service URL: https://$SERVICE_URL"
          
          # Wait a bit for the service to be fully ready
          sleep 10
          
          # Test the health endpoint
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://$SERVICE_URL/health")
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "✅ Health check passed (HTTP $HTTP_CODE)"
          else
            echo "⚠️  Health check returned HTTP $HTTP_CODE (may still be starting up)"
          fi
          
          # Test the root endpoint
          curl -s "https://$SERVICE_URL/" | jq .

      - name: Deployment summary
        run: |
          if [ "${{ steps.check-deployment.outputs.deployment_needed }}" == "true" ]; then
            echo "### ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Service:** ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
            echo "**Image:** \`${{ steps.latest-image.outputs.latest_image }}\`" >> $GITHUB_STEP_SUMMARY
            echo "**Tag:** \`${{ steps.latest-image.outputs.latest_tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ℹ️ No Deployment Needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "App Runner is already running the latest image." >> $GITHUB_STEP_SUMMARY
            echo "**Current Image:** \`${{ steps.current-image.outputs.current_image }}\`" >> $GITHUB_STEP_SUMMARY
          fi

